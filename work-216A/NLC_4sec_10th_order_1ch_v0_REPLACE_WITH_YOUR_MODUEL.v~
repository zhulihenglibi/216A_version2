// ********************************************************************
//
// Copyright (C) 1994-2014, Synopsys Inc.  All Rights Reserved

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler J-2014.09, Build 015R, Aug 22 2014
// Date written:             Wed Nov 11 23:45:28 2015

// ********************************************************************

// Generated from /app/design/dmgroup/spike/vahagn/tsmc_vco_nlc/synphony_ee216a/NLC_4sec_10th_order_1ch_v0.slx Version 1.164 Last modified date Wed Nov 11 19:31:00 2015
module coompute_polynomial_value_fused_mult_add_FP_Add_getmsbpos1_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [4:0] N_4;  
wire [3:0] N_5;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_1930;  
wire [4:0] N_y_1_1931;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [2:0] N_7;  
wire [1:0] N_5;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen849_1_1240;  
wire [0:0] N_GlobalEnable1_0_1794;  
wire [1:0] N_x1_0_1795;  
wire [0:0] N_x1_sel_0_1796;  
wire [2:0] N_x2_0_1797;  
wire [0:0] N_x2_sel_0_1798;  
wire [2:0] N_y_1_1799;  
wire [0:0] N_y_sel_1_1800;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen849_1_1240 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [1:0] N_4;  
wire [0:0] N_3;  
wire [1:0] N_6;  
wire [1:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_1;  
wire [1:0] N_2;  
wire [3:0] N_sel_0_1801;  
wire [1:0] N_y_1_1802;  
wire [0:0] N_y_sel_1_1803;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [2:0] N_4;  
wire [0:0] N_3;  
wire [2:0] N_6;  
wire [2:0] N_7;  
wire [2:0] N_8;  
wire [2:0] N_9;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [3:0] N_sel_0_1804;  
wire [2:0] N_y_1_1805;  
wire [0:0] N_y_sel_1_1806;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] y, // ufix4_En0
  input [1:0] sel // ufix2_En0
);
wire [3:0] N_2;  
wire [1:0] N_3;  
wire [3:0] N_7;  
wire [3:0] N_4;  
wire [3:0] N_6;  
wire [1:0] N_sel_0_1807;  
wire [3:0] N_y_1_1808;  
wire GlobalResetSel;
assign y = N_6;
  assign N_3 = sel;
    assign N_6 = N_2;
  generate
  begin: Mux_block
    wire [3:0] med  [3:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_7) ;
    assign med[2] = $unsigned(N_4) ;
    assign med[3] = $unsigned(N_4) ;

    always@(*)
    begin
      if(N_3[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[1:0]];
    end

    assign N_2 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_4 = 4'b1000;
assign N_7 = 4'b1001;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] x, // ufix4_En0
  input msb // ufix1
);
wire [3:0] N_7;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [0:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_2;  
wire [4:0] N_1;  
wire [0:0] N_msb_0_1809;  
wire [3:0] N_x_0_1810;  
wire [4:0] N_y_1_1811;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [4:0] tmpOut;
    wire  [4:0] tmp_N_7_0;
    wire  [4:0] tmp_N_3_1;
    wire [4:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] y, // ufix4_En0
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [3:0] N_2;  
wire [2:0] N_x1_0_1812;  
wire [0:0] N_x1_sel_0_1813;  
wire [3:0] N_x2_0_1814;  
wire [3:0] N_y_1_1815;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen854_1_1245;  
wire [0:0] N_GlobalEnable1_0_1819;  
wire [2:0] N_x1_0_1820;  
wire [0:0] N_x1_sel_0_1821;  
wire [3:0] N_x2_0_1822;  
wire [0:0] N_x2_sel_0_1823;  
wire [3:0] N_y_1_1824;  
wire [0:0] N_y_sel_1_1825;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen854_1_1245 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen853_1_1244;  
wire [0:0] N_GlobalEnable1_0_1826;  
wire [4:0] N_x1_0_1827;  
wire [0:0] N_x1_sel_0_1828;  
wire [4:0] N_x2_0_1829;  
wire [0:0] N_x2_sel_0_1830;  
wire [4:0] N_y_1_1831;  
wire [0:0] N_y_sel_1_1832;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen853_1_1244 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen852_1_1243;  
wire [0:0] N_GlobalEnable1_0_1833;  
wire [3:0] N_x1_0_1834;  
wire [0:0] N_x1_sel_0_1835;  
wire [3:0] N_x2_0_1836;  
wire [0:0] N_x2_sel_0_1837;  
wire [3:0] N_y_1_1838;  
wire [0:0] N_y_sel_1_1839;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen852_1_1243 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_1853;  
wire [3:0] N_y_1_1854;  
wire [0:0] N_y_sel_1_1855;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_1856;  
wire [3:0] N_y_1_1857;  
wire [0:0] N_y_sel_1_1858;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_1859;  
wire [4:0] N_y_1_1860;  
wire [0:0] N_y_sel_1_1861;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_1862;  
wire [4:0] N_y_1_1863;  
wire [0:0] N_y_sel_1_1864;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_1865;  
wire [4:0] N_y_1_1866;  
wire [0:0] N_y_sel_1_1867;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11011;
assign N_7 = 5'b11010;
assign N_8 = 5'b11001;
assign N_9 = 5'b11000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP8 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [4:0] N_4;  
wire [3:0] N_5;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_1868;  
wire [4:0] N_y_1_1869;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11111;
assign N_7 = 5'b11110;
assign N_8 = 5'b11101;
assign N_9 = 5'b11100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [4:0] x, // ufix5_En0
  input msb // ufix1
);
wire [4:0] N_7;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [0:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_2;  
wire [5:0] N_1;  
wire [0:0] N_msb_0_1870;  
wire [4:0] N_x_0_1871;  
wire [5:0] N_y_1_1872;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_7_0;
    wire  [5:0] tmp_N_3_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg3_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [3:0] N_5;  
wire [4:0] N_2;  
wire [3:0] N_x1_0_1873;  
wire [0:0] N_x1_sel_0_1874;  
wire [4:0] N_x2_0_1875;  
wire [4:0] N_y_1_1876;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [4:0] N_2;  
wire [4:0] N_x1_0_1881;  
wire [0:0] N_x1_sel_0_1882;  
wire [4:0] N_x2_0_1883;  
wire [4:0] N_y_1_1884;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_fused_mult_add_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [23:0] x // ufix24_En0
);
wire [4:0] N_21;  
wire [23:0] N_28;  
wire [0:0] N_30;  
wire [5:0] N_29;  
wire [4:0] N_31;  
wire [5:0] N_32;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen858_1_1249;  
wire [2:0] N_13;  
wire [0:0] N_14;  
wire [3:0] N_15;  
wire [0:0] N_16;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_22;  
wire [3:0] N_23;  
wire [3:0] N_24;  
wire [3:0] N_25;  
wire [3:0] N_26;  
wire [3:0] N_27;  
wire [3:0] N_17;  
wire [0:0] N_18;  
wire [4:0] N_19;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_GlobalEnable1_0_1940;  
wire [23:0] N_x_0_1941;  
wire [5:0] N_y_1_1942;  
wire GlobalResetSel;
assign y = N_32;
  assign N_28 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen858_1_1249 = GlobalEnable1;
  synBusAdapter #(
      .inp_width(5),
      .out_width(6),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_21),
      .outp(N_29)
   );
  //start Extract
    assign N_22[0] = N_28[20];
    assign N_22[1] = N_28[21];
    assign N_22[2] = N_28[22];
    assign N_22[3] = N_28[23];
    assign N_23[0] = N_28[16];
    assign N_23[1] = N_28[17];
    assign N_23[2] = N_28[18];
    assign N_23[3] = N_28[19];
    assign N_24[0] = N_28[12];
    assign N_24[1] = N_28[13];
    assign N_24[2] = N_28[14];
    assign N_24[3] = N_28[15];
    assign N_25[0] = N_28[8];
    assign N_25[1] = N_28[9];
    assign N_25[2] = N_28[10];
    assign N_25[3] = N_28[11];
    assign N_26[0] = N_28[4];
    assign N_26[1] = N_28[5];
    assign N_26[2] = N_28[6];
    assign N_26[3] = N_28[7];
    assign N_27[0] = N_28[0];
    assign N_27[1] = N_28[1];
    assign N_27[2] = N_28[2];
    assign N_27[3] = N_28[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_29) ;
    assign med[1] = $unsigned(N_31) ;

    always@(*)
    begin
      if(N_30[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_30[0:0]];
    end

    assign N_32 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [23:0] med1;
  wire  [23:0] med2;
  wire outp;
  assign med1 = $unsigned(N_28) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_30 = outp;
    synComparator #(
      .bitwidth(24),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_31 = 5'b11000;
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_17) ,
      .y_sel(N_18)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_15) ,
      .y_sel(N_16)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_13) ,
      .y_sel(N_14)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_22),
      .y(N_1) ,
      .y_sel(N_2)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_23),
      .y(N_3) ,
      .y_sel(N_4)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_24),
      .y(N_5) ,
      .y_sel(N_6)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_25),
      .y(N_7) ,
      .y_sel(N_8)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_26),
      .y(N_9) ,
      .y_sel(N_10)    );
    coompute_polynomial_value_fused_mult_add_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_27),
      .y(N_11)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg3_1  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .y(N_21)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .y(N_19)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [10:0] x // ufix11_En0
);
wire [10:0] N_15;  
wire [0:0] N_17;  
wire [4:0] N_14;  
wire [3:0] N_18;  
wire [4:0] N_19;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen848_1_1239;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_11;  
wire [3:0] N_12;  
wire [1:0] N_13;  
wire [0:0] N_9;  
wire [3:0] N_10;  
wire [2:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_GlobalEnable1_0_1816;  
wire [10:0] N_x_0_1817;  
wire [4:0] N_y_1_1818;  
wire GlobalResetSel;
assign y = N_19;
  assign N_15 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen848_1_1239 = GlobalEnable1;
  //start Extract
    assign N_9[0] = N_15[10];
    assign N_11[0] = N_15[6];
    assign N_11[1] = N_15[7];
    assign N_11[2] = N_15[8];
    assign N_11[3] = N_15[9];
    assign N_12[0] = N_15[2];
    assign N_12[1] = N_15[3];
    assign N_12[2] = N_15[4];
    assign N_12[3] = N_15[5];
    assign N_13[0] = N_15[0];
    assign N_13[1] = N_15[1];
  //end Extract
  generate
  begin: Zmux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_14) ;
    assign med[1] = $unsigned(N_18) ;

    always@(*)
    begin
      if(N_17[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_17[0:0]];
    end

    assign N_19 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_15) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_17 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_18 = 4'b1011;
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_5) ,
      .y_sel(N_6)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_11),
      .y(N_1) ,
      .y_sel(N_2)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_12),
      .y(N_3) ,
      .y_sel(N_4)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_13),
      .y(N_7)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_9),
      .x(N_10),
      .y(N_14)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .y(N_10)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [32:0] x // ufix33_En0
);
wire [5:0] N_39;  
wire [32:0] N_40;  
wire [0:0] N_42;  
wire [6:0] N_41;  
wire [5:0] N_43;  
wire [6:0] N_44;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen850_1_1241;  
wire [2:0] N_17;  
wire [0:0] N_18;  
wire [3:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_31;  
wire [3:0] N_32;  
wire [3:0] N_33;  
wire [3:0] N_34;  
wire [3:0] N_35;  
wire [3:0] N_36;  
wire [3:0] N_37;  
wire [3:0] N_38;  
wire [0:0] N_29;  
wire [4:0] N_30;  
wire [3:0] N_25;  
wire [0:0] N_26;  
wire [4:0] N_27;  
wire [4:0] N_21;  
wire [0:0] N_22;  
wire [4:0] N_23;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_GlobalEnable1_0_1885;  
wire [32:0] N_x_0_1886;  
wire [6:0] N_y_1_1887;  
wire GlobalResetSel;
assign y = N_44;
  assign N_40 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen850_1_1241 = GlobalEnable1;
  synBusAdapter #(
      .inp_width(6),
      .out_width(7),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_39),
      .outp(N_41)
   );
  //start Extract
    assign N_29[0] = N_40[32];
    assign N_31[0] = N_40[28];
    assign N_31[1] = N_40[29];
    assign N_31[2] = N_40[30];
    assign N_31[3] = N_40[31];
    assign N_32[0] = N_40[24];
    assign N_32[1] = N_40[25];
    assign N_32[2] = N_40[26];
    assign N_32[3] = N_40[27];
    assign N_33[0] = N_40[20];
    assign N_33[1] = N_40[21];
    assign N_33[2] = N_40[22];
    assign N_33[3] = N_40[23];
    assign N_34[0] = N_40[16];
    assign N_34[1] = N_40[17];
    assign N_34[2] = N_40[18];
    assign N_34[3] = N_40[19];
    assign N_35[0] = N_40[12];
    assign N_35[1] = N_40[13];
    assign N_35[2] = N_40[14];
    assign N_35[3] = N_40[15];
    assign N_36[0] = N_40[8];
    assign N_36[1] = N_40[9];
    assign N_36[2] = N_40[10];
    assign N_36[3] = N_40[11];
    assign N_37[0] = N_40[4];
    assign N_37[1] = N_40[5];
    assign N_37[2] = N_40[6];
    assign N_37[3] = N_40[7];
    assign N_38[0] = N_40[0];
    assign N_38[1] = N_40[1];
    assign N_38[2] = N_40[2];
    assign N_38[3] = N_40[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_41) ;
    assign med[1] = $unsigned(N_43) ;

    always@(*)
    begin
      if(N_42[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_42[0:0]];
    end

    assign N_44 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [32:0] med1;
  wire  [32:0] med2;
  wire outp;
  assign med1 = $unsigned(N_40) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_42 = outp;
    synComparator #(
      .bitwidth(33),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_43 = 6'b100001;
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_25) ,
      .y_sel(N_26)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_21) ,
      .y_sel(N_22)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_19) ,
      .y_sel(N_20)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_17) ,
      .y_sel(N_18)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_31),
      .y(N_1) ,
      .y_sel(N_2)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_32),
      .y(N_3) ,
      .y_sel(N_4)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_33),
      .y(N_5) ,
      .y_sel(N_6)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_34),
      .y(N_7) ,
      .y_sel(N_8)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_35),
      .y(N_9) ,
      .y_sel(N_10)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_36),
      .y(N_11) ,
      .y_sel(N_12)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_37),
      .y(N_13) ,
      .y_sel(N_14)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_38),
      .y(N_15)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_29),
      .x(N_30),
      .y(N_39)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_30)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .y(N_27)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .y(N_23)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP_log2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] Out1, // ufix5_En0
  input [21:0] In1 // ufix22_En0
);
wire [0:0] N_3;  
wire [0:0] N_4;  
wire [0:0] N_5;  
wire [0:0] N_6;  
wire [0:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_10;  
wire [0:0] N_11;  
wire [0:0] N_12;  
wire [0:0] N_13;  
wire [0:0] N_14;  
wire [0:0] N_15;  
wire [0:0] N_16;  
wire [0:0] N_17;  
wire [0:0] N_18;  
wire [0:0] N_19;  
wire [0:0] N_20;  
wire [0:0] N_21;  
wire [0:0] N_22;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [21:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_33;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen855_1_1246;  
wire [0:0] N_32;  
wire [0:0] N_31;  
wire [0:0] N_30;  
wire [0:0] N_29;  
wire [0:0] N_28;  
wire [0:0] N_27;  
wire [0:0] N_45;  
wire [0:0] N_44;  
wire [0:0] N_26;  
wire [0:0] N_43;  
wire [0:0] N_42;  
wire [0:0] N_41;  
wire [0:0] N_40;  
wire [0:0] N_39;  
wire [0:0] N_38;  
wire [0:0] N_37;  
wire [0:0] N_36;  
wire [0:0] N_35;  
wire [0:0] N_34;  
wire [0:0] N_25;  
wire [0:0] N_GlobalEnable1_0_1888;  
wire [21:0] N_In1_0_1889;  
wire [4:0] N_Out1_1_1890;  
wire GlobalResetSel;
assign Out1 = N_2;
  assign N_1 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen855_1_1246 = GlobalEnable1;
  generate
  begin: Add_block
    wire enab;
    wire [4:0] tmpOut;
    wire  [4:0] tmp_N_3_0;
    wire  [4:0] tmp_N_4_1;
    wire  [4:0] tmp_N_5_2;
    wire  [4:0] tmp_N_6_3;
    wire  [4:0] tmp_N_7_4;
    wire  [4:0] tmp_N_8_5;
    wire  [4:0] tmp_N_9_6;
    wire  [4:0] tmp_N_10_7;
    wire  [4:0] tmp_N_11_8;
    wire  [4:0] tmp_N_12_9;
    wire  [4:0] tmp_N_13_10;
    wire  [4:0] tmp_N_14_11;
    wire  [4:0] tmp_N_15_12;
    wire  [4:0] tmp_N_16_13;
    wire  [4:0] tmp_N_17_14;
    wire  [4:0] tmp_N_18_15;
    wire  [4:0] tmp_N_19_16;
    wire  [4:0] tmp_N_20_17;
    wire  [4:0] tmp_N_21_18;
    wire  [4:0] tmp_N_22_19;
    wire  [4:0] tmp_N_23_20;
    wire  [4:0] tmp_N_24_21;
    wire [4:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_3_0 = ($unsigned(N_3) << 0);
    assign tmp_N_4_1 = ($unsigned(N_4) << 0);
    assign tmp_N_5_2 = ($unsigned(N_5) << 0);
    assign tmp_N_6_3 = ($unsigned(N_6) << 0);
    assign tmp_N_7_4 = ($unsigned(N_7) << 0);
    assign tmp_N_8_5 = ($unsigned(N_8) << 0);
    assign tmp_N_9_6 = ($unsigned(N_9) << 0);
    assign tmp_N_10_7 = ($unsigned(N_10) << 0);
    assign tmp_N_11_8 = ($unsigned(N_11) << 0);
    assign tmp_N_12_9 = ($unsigned(N_12) << 0);
    assign tmp_N_13_10 = ($unsigned(N_13) << 0);
    assign tmp_N_14_11 = ($unsigned(N_14) << 0);
    assign tmp_N_15_12 = ($unsigned(N_15) << 0);
    assign tmp_N_16_13 = ($unsigned(N_16) << 0);
    assign tmp_N_17_14 = ($unsigned(N_17) << 0);
    assign tmp_N_18_15 = ($unsigned(N_18) << 0);
    assign tmp_N_19_16 = ($unsigned(N_19) << 0);
    assign tmp_N_20_17 = ($unsigned(N_20) << 0);
    assign tmp_N_21_18 = ($unsigned(N_21) << 0);
    assign tmp_N_22_19 = ($unsigned(N_22) << 0);
    assign tmp_N_23_20 = ($unsigned(N_23) << 0);
    assign tmp_N_24_21 = ($unsigned(N_24) << 0);
    assign  tmpOutPre =   tmp_N_3_0 + tmp_N_4_1 + tmp_N_5_2 + tmp_N_6_3 + tmp_N_7_4 + tmp_N_8_5 + tmp_N_9_6 + tmp_N_10_7 + tmp_N_11_8 + tmp_N_12_9
                        + tmp_N_13_10 + tmp_N_14_11 + tmp_N_15_12 + tmp_N_16_13 + tmp_N_17_14 + tmp_N_18_15 + tmp_N_19_16 + tmp_N_20_17 + tmp_N_21_18 + tmp_N_22_19
                        + tmp_N_23_20 + tmp_N_24_21;
    assign tmpOut = tmpOutPre;
    assign N_2 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  //start Extract
    assign N_3[0] = N_1[21];
    assign N_25[0] = N_1[20];
    assign N_26[0] = N_1[19];
    assign N_27[0] = N_1[18];
    assign N_28[0] = N_1[17];
    assign N_29[0] = N_1[16];
    assign N_30[0] = N_1[15];
    assign N_31[0] = N_1[14];
    assign N_32[0] = N_1[13];
    assign N_33[0] = N_1[12];
    assign N_34[0] = N_1[11];
    assign N_35[0] = N_1[10];
    assign N_36[0] = N_1[9];
    assign N_37[0] = N_1[8];
    assign N_38[0] = N_1[7];
    assign N_39[0] = N_1[6];
    assign N_40[0] = N_1[5];
    assign N_41[0] = N_1[4];
    assign N_42[0] = N_1[3];
    assign N_43[0] = N_1[2];
    assign N_44[0] = N_1[1];
    assign N_45[0] = N_1[0];
  //end Extract
  generate
  begin: Binary_Logic9_block
    assign N_12 = (N_11 | N_33);
  end // Binary_Logic9_block;
  endgenerate
  generate
  begin: Binary_Logic8_block
    assign N_11 = (N_10 | N_32);
  end // Binary_Logic8_block;
  endgenerate
  generate
  begin: Binary_Logic7_block
    assign N_10 = (N_9 | N_31);
  end // Binary_Logic7_block;
  endgenerate
  generate
  begin: Binary_Logic6_block
    assign N_9 = (N_8 | N_30);
  end // Binary_Logic6_block;
  endgenerate
  generate
  begin: Binary_Logic5_block
    assign N_8 = (N_7 | N_29);
  end // Binary_Logic5_block;
  endgenerate
  generate
  begin: Binary_Logic4_block
    assign N_7 = (N_6 | N_28);
  end // Binary_Logic4_block;
  endgenerate
  generate
  begin: Binary_Logic3_block
    assign N_6 = (N_5 | N_27);
  end // Binary_Logic3_block;
  endgenerate
  generate
  begin: Binary_Logic21_block
    assign N_24 = (N_23 | N_45);
  end // Binary_Logic21_block;
  endgenerate
  generate
  begin: Binary_Logic20_block
    assign N_23 = (N_22 | N_44);
  end // Binary_Logic20_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_5 = (N_4 | N_26);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic19_block
    assign N_22 = (N_21 | N_43);
  end // Binary_Logic19_block;
  endgenerate
  generate
  begin: Binary_Logic18_block
    assign N_21 = (N_20 | N_42);
  end // Binary_Logic18_block;
  endgenerate
  generate
  begin: Binary_Logic17_block
    assign N_20 = (N_19 | N_41);
  end // Binary_Logic17_block;
  endgenerate
  generate
  begin: Binary_Logic16_block
    assign N_19 = (N_18 | N_40);
  end // Binary_Logic16_block;
  endgenerate
  generate
  begin: Binary_Logic15_block
    assign N_18 = (N_17 | N_39);
  end // Binary_Logic15_block;
  endgenerate
  generate
  begin: Binary_Logic14_block
    assign N_17 = (N_16 | N_38);
  end // Binary_Logic14_block;
  endgenerate
  generate
  begin: Binary_Logic13_block
    assign N_16 = (N_15 | N_37);
  end // Binary_Logic13_block;
  endgenerate
  generate
  begin: Binary_Logic12_block
    assign N_15 = (N_14 | N_36);
  end // Binary_Logic12_block;
  endgenerate
  generate
  begin: Binary_Logic11_block
    assign N_14 = (N_13 | N_35);
  end // Binary_Logic11_block;
  endgenerate
  generate
  begin: Binary_Logic10_block
    assign N_13 = (N_12 | N_34);
  end // Binary_Logic10_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_4 = (N_3 | N_25);
  end // Binary_Logic1_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_fused_mult_add_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] z, // ufix32_En0
  input [31:0] y, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [25:0] N_73;  
wire [7:0] N_51;  
wire [0:0] N_29;  
wire [7:0] N_41;  
wire [7:0] N_42;  
wire [7:0] N_53;  
wire [33:0] N_47;  
wire [33:0] N_48;  
wire [5:0] N_97;  
wire [25:0] N_52;  
wire [0:0] N_56;  
wire [7:0] N_54;  
wire [22:0] N_55;  
wire [0:0] N_30;  
wire [22:0] N_77;  
wire [0:0] N_31;  
wire [22:0] N_83;  
wire [9:0] N_90;  
wire [8:0] N_71;  
wire [8:0] N_72;  
wire [23:0] N_27;  
wire [23:0] N_28;  
wire [23:0] N_80;  
wire [23:0] N_96;  
wire [34:0] N_16;  
wire [23:0] N_89;  
wire [7:0] N_86;  
wire [7:0] N_75;  
wire [32:0] N_94;  
wire [32:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [33:0] N_87;  
wire [33:0] N_88;  
wire [25:0] N_12;  
wire [7:0] N_49;  
wire [7:0] N_82;  
wire [7:0] N_32;  
wire [22:0] N_84;  
wire [0:0] N_22;  
wire [23:0] N_35;  
wire [23:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [8:0] N_14;  
wire [8:0] N_15;  
wire [25:0] N_39;  
wire [31:0] N_3;  
wire [25:0] N_50;  
wire [31:0] N_4;  
wire [23:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [32:0] N_43;  
wire [33:0] N_92;  
wire [0:0] N_46;  
wire [32:0] N_44;  
wire [33:0] N_93;  
wire [0:0] N_79;  
wire [23:0] N_38;  
wire [23:0] N_37;  
wire [9:0] N_17;  
wire [8:0] N_13;  
wire [23:0] N_57;  
wire [8:0] N_33;  
wire [23:0] N_58;  
wire [8:0] N_34;  
wire [23:0] N_76;  
wire [31:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen857_1_1248;  
wire [0:0] N_GlobalEnable1_0_1943;  
wire [31:0] N_x_0_1944;  
wire [31:0] N_y_0_1945;  
wire [31:0] N_z_1_1946;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen857_1_1248 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [26:0] med;
    wire [26:0] medo;
    wire [26:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[25:0];
    synAbs #(
      .bitwidth(27)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_51_0;
    wire  [8:0] tmp_N_29_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_42_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_53_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [34:0] tmpOut;
    wire signed [34:0] tmp_N_47_0;
    wire signed [34:0] tmp_N_48_1;
    wire [34:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_51_0;
    wire  [9:0] tmp_N_97_1;
    wire  [9:0] tmp_N_29_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [25:0] med1;
  wire signed [25:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(24'b000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(26),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [31:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[31:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [23:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[23:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [23:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[23:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(35),
      .out_width(26),
      .datatype("signed"),
      .preshift(0),

      .infrac(33),
      .outfrac(23),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(34), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(34), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(23), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[31];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[23];
    assign N_75[1] = N_3[24];
    assign N_75[2] = N_3[25];
    assign N_75[3] = N_3[26];
    assign N_75[4] = N_3[27];
    assign N_75[5] = N_3[28];
    assign N_75[6] = N_3[29];
    assign N_75[7] = N_3[30];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[24];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[31];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[23];
    assign N_82[1] = N_4[24];
    assign N_82[2] = N_4[25];
    assign N_82[3] = N_4[26];
    assign N_82[4] = N_4[27];
    assign N_82[5] = N_4[28];
    assign N_82[6] = N_4[29];
    assign N_82[7] = N_4[30];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [33:0] med  [1:0];
    reg [33:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [33:0] med  [1:0];
    reg [33:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [9:0] med  [1:0];
    reg [9:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [33:0] med ;
    wire signed [33:0] medo;
    wire [33:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[33:0];
    synNegate #(
      .bitwidth(34)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [33:0] med ;
    wire signed [33:0] medo;
    wire [33:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[33:0];
    synNegate #(
      .bitwidth(34)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_57) <<< 9;
    assign N_94 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[8:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_58) <<< 9;
    assign N_95 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[8:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [23:0] medo;
    wire [23:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[23:0];
    synShifter #(
      .inpBitW(24),
      .outBitW(24),
      .shfBitW(6),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[5:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    coompute_polynomial_value_fused_mult_add_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_fused_mult_add_FP_Mult1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] z, // ufix32_En0
  input [31:0] y, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [8:0] N_57;  
wire [0:0] N_74;  
wire [6:0] N_26;  
wire [7:0] N_29;  
wire [0:0] N_30;  
wire [7:0] N_59;  
wire [7:0] N_60;  
wire [46:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [22:0] N_69;  
wire [0:0] N_25;  
wire [22:0] N_72;  
wire [0:0] N_45;  
wire [7:0] N_44;  
wire [22:0] N_43;  
wire [23:0] N_20;  
wire [47:0] N_58;  
wire [48:0] N_27;  
wire [9:0] N_39;  
wire [23:0] N_21;  
wire [23:0] N_32;  
wire [23:0] N_33;  
wire [0:0] N_63;  
wire [9:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [22:0] N_73;  
wire [7:0] N_31;  
wire [0:0] N_42;  
wire [47:0] N_36;  
wire [47:0] N_66;  
wire [8:0] N_61;  
wire [47:0] N_75;  
wire [7:0] N_68;  
wire [7:0] N_71;  
wire [8:0] N_12;  
wire [0:0] N_14;  
wire [31:0] N_3;  
wire [47:0] N_56;  
wire [47:0] N_37;  
wire [31:0] N_4;  
wire [23:0] N_28;  
wire [23:0] N_34;  
wire [23:0] N_35;  
wire [0:0] N_64;  
wire [47:0] N_19;  
wire [31:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen863_1_1254;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_1947;  
wire [31:0] N_x_0_1948;  
wire [31:0] N_y_0_1949;  
wire [31:0] N_z_1_1950;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen863_1_1254 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_57_0;
    wire  [9:0] tmp_N_74_1;
    wire  [9:0] tmp_N_26_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_29_0;
    wire  [8:0] tmp_N_30_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(9), .out_width(8), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_59_0;
    wire  [8:0] tmp_N_60_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [47:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[47:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [23:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[23:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [23:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[23:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [31:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[31:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(48),
      .out_width(49),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(49),
      .out_width(24),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(48),
      .outfrac(23),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(10), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(23), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(48), .preferRAMImpl(2), .delaylength(3) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_37) );
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(48), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(3) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_61) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_62) );
  //start Extract
    assign N_63[0] = N_3[31];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[47];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[48];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[23];
    assign N_68[1] = N_3[24];
    assign N_68[2] = N_3[25];
    assign N_68[3] = N_3[26];
    assign N_68[4] = N_3[27];
    assign N_68[5] = N_3[28];
    assign N_68[6] = N_3[29];
    assign N_68[7] = N_3[30];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[31];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[23];
    assign N_71[1] = N_4[24];
    assign N_71[2] = N_4[25];
    assign N_71[3] = N_4[26];
    assign N_71[4] = N_4[27];
    assign N_71[5] = N_4[28];
    assign N_71[6] = N_4[29];
    assign N_71[7] = N_4[30];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [47:0] tmpOut;
    wire  [23:0] tmpin1;
    wire  [23:0] tmpin2;
    wire  [47:0] med;
    assign med = tmpOut ;
    assign N_36 = med[47:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 7'b1111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_fused_mult_add_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] z, // ufix32_En0
  input [31:0] y, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [8:0] N_57;  
wire [0:0] N_74;  
wire [6:0] N_26;  
wire [7:0] N_29;  
wire [0:0] N_30;  
wire [7:0] N_59;  
wire [7:0] N_60;  
wire [46:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [22:0] N_69;  
wire [0:0] N_25;  
wire [22:0] N_72;  
wire [0:0] N_45;  
wire [7:0] N_44;  
wire [22:0] N_43;  
wire [23:0] N_20;  
wire [47:0] N_58;  
wire [48:0] N_27;  
wire [9:0] N_39;  
wire [23:0] N_21;  
wire [23:0] N_32;  
wire [23:0] N_33;  
wire [0:0] N_63;  
wire [9:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [22:0] N_73;  
wire [7:0] N_31;  
wire [0:0] N_42;  
wire [47:0] N_36;  
wire [47:0] N_66;  
wire [8:0] N_61;  
wire [47:0] N_75;  
wire [7:0] N_68;  
wire [7:0] N_71;  
wire [8:0] N_12;  
wire [0:0] N_14;  
wire [31:0] N_3;  
wire [47:0] N_56;  
wire [47:0] N_37;  
wire [31:0] N_4;  
wire [23:0] N_28;  
wire [23:0] N_34;  
wire [23:0] N_35;  
wire [0:0] N_64;  
wire [47:0] N_19;  
wire [31:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen862_1_1253;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_1951;  
wire [31:0] N_x_0_1952;  
wire [31:0] N_y_0_1953;  
wire [31:0] N_z_1_1954;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen862_1_1253 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_57_0;
    wire  [9:0] tmp_N_74_1;
    wire  [9:0] tmp_N_26_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_29_0;
    wire  [8:0] tmp_N_30_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(9), .out_width(8), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_59_0;
    wire  [8:0] tmp_N_60_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [47:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[47:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [23:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[23:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [23:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[23:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [31:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[31:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(48),
      .out_width(49),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(49),
      .out_width(24),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(48),
      .outfrac(23),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(10), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(23), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(48), .preferRAMImpl(2), .delaylength(3) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_37) );
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(48), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(3) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_61) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_62) );
  //start Extract
    assign N_63[0] = N_3[31];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[47];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[48];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[23];
    assign N_68[1] = N_3[24];
    assign N_68[2] = N_3[25];
    assign N_68[3] = N_3[26];
    assign N_68[4] = N_3[27];
    assign N_68[5] = N_3[28];
    assign N_68[6] = N_3[29];
    assign N_68[7] = N_3[30];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[31];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[23];
    assign N_71[1] = N_4[24];
    assign N_71[2] = N_4[25];
    assign N_71[3] = N_4[26];
    assign N_71[4] = N_4[27];
    assign N_71[5] = N_4[28];
    assign N_71[6] = N_4[29];
    assign N_71[7] = N_4[30];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [47:0] tmpOut;
    wire  [23:0] tmpin1;
    wire  [23:0] tmpin2;
    wire  [47:0] med;
    assign med = tmpOut ;
    assign N_36 = med[47:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 7'b1111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module select_section_coefficients_coeff_1_0 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] y, // ufix32_En0
  input [31:0] porty // ufix32_En0
);
wire [31:0] N_1;  
wire [31:0] N_porty_0_1726;  
wire [31:0] N_y_1_1727;  
wire GlobalResetSel;
assign y = N_1;
  assign N_1 = porty;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_Fixed_to_FP (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] y, // ufix32_En0
  input [31:0] x // sfix32_En11
);
wire [31:0] N_4;  
wire [5:0] N_16;  
wire [6:0] N_9;  
wire [0:0] N_24;  
wire [7:0] N_11;  
wire [22:0] N_12;  
wire [31:0] N_5;  
wire [8:0] N_32;  
wire [32:0] N_18;  
wire [32:0] N_22;  
wire [4:0] N_7;  
wire [6:0] N_29;  
wire [0:0] N_8;  
wire [32:0] N_13;  
wire [0:0] N_23;  
wire [4:0] N_19;  
wire [0:0] N_30;  
wire [23:0] N_27;  
wire [32:0] N_10;  
wire [0:0] N_21;  
wire [4:0] N_20;  
wire [5:0] N_17;  
wire [0:0] N_33;  
wire [8:0] N_6;  
wire [1:0] N_31;  
wire [4:0] N_26;  
wire [32:0] N_28;  
wire [6:0] N_25;  
wire [31:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen847_1_1238;  
wire [21:0] N_14;  
wire [10:0] N_15;  
wire [0:0] N_GlobalEnable1_0_1891;  
wire [31:0] N_x_0_1892;  
wire [31:0] N_y_1_1893;  
wire GlobalResetSel;
assign y = N_3;
  assign N_4 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen847_1_1238 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [32:0] med;
    wire [32:0] medo;
    wire [32:0] tmpOut;
    assign med = $signed(N_4);
    assign medo = $unsigned(tmpOut) ;
    assign N_5 = medo[31:0];
    synAbs #(
      .bitwidth(33)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [8:0] tmpOut;
    wire signed [8:0] tmp_N_16_0;
    wire  [8:0] tmp_N_9_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_16_0 = ($signed(N_16) << 0);
    assign tmp_N_9_1 = ($unsigned(N_9) << 0);
    assign  tmpOutPre =   tmp_N_16_0 + tmp_N_9_1;
    assign tmpOut = tmpOutPre;
    assign N_6 = $signed(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Comparator_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_4) ;
  assign med2 = $signed(12'b000000000000) ;
  assign N_23 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("les")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
  generate
  begin: Concat_block
    wire [31:0] med;
    assign med = { N_24, N_11, N_12 };
    assign N_3 = med[31:0];  end // Concat_block
  endgenerate
assign N_31 = 2'b00;
  synBusAdapter #(
      .inp_width(32),
      .out_width(33),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_5),
      .outp(N_10)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(8),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_32),
      .outp(N_11)
   );
  synBusAdapter #(
      .inp_width(33),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0),

      .infrac(32),
      .outfrac(23),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_18),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(33),
      .out_width(33),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_22),
      .outp(N_28)
   );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(2) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_7), .outp(N_20) );
    synDelayWithEnable #( .bitwidth(7), .preferRAMImpl(2), .delaylength(2) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_29), .outp(N_25) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_8), .outp(N_21) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_13), .outp(N_22) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_23), .outp(N_24) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(2) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_19), .outp(N_26) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_30), .outp(N_33) );
  //start Extract
    assign N_12[0] = N_27[0];
    assign N_12[1] = N_27[1];
    assign N_12[2] = N_27[2];
    assign N_12[3] = N_27[3];
    assign N_12[4] = N_27[4];
    assign N_12[5] = N_27[5];
    assign N_12[6] = N_27[6];
    assign N_12[7] = N_27[7];
    assign N_12[8] = N_27[8];
    assign N_12[9] = N_27[9];
    assign N_12[10] = N_27[10];
    assign N_12[11] = N_27[11];
    assign N_12[12] = N_27[12];
    assign N_12[13] = N_27[13];
    assign N_12[14] = N_27[14];
    assign N_12[15] = N_27[15];
    assign N_12[16] = N_27[16];
    assign N_12[17] = N_27[17];
    assign N_12[18] = N_27[18];
    assign N_12[19] = N_27[19];
    assign N_12[20] = N_27[20];
    assign N_12[21] = N_27[21];
    assign N_12[22] = N_27[22];
  //end Extract
  //start Extract3
    assign N_13[0] = N_10[0];
    assign N_13[1] = N_10[1];
    assign N_13[2] = N_10[2];
    assign N_13[3] = N_10[3];
    assign N_13[4] = N_10[4];
    assign N_13[5] = N_10[5];
    assign N_13[6] = N_10[6];
    assign N_13[7] = N_10[7];
    assign N_13[8] = N_10[8];
    assign N_13[9] = N_10[9];
    assign N_13[10] = N_10[10];
    assign N_13[11] = N_10[11];
    assign N_13[12] = N_10[12];
    assign N_13[13] = N_10[13];
    assign N_13[14] = N_10[14];
    assign N_13[15] = N_10[15];
    assign N_13[16] = N_10[16];
    assign N_13[17] = N_10[17];
    assign N_13[18] = N_10[18];
    assign N_13[19] = N_10[19];
    assign N_13[20] = N_10[20];
    assign N_13[21] = N_10[21];
    assign N_13[22] = N_10[22];
    assign N_13[23] = N_10[23];
    assign N_13[24] = N_10[24];
    assign N_13[25] = N_10[25];
    assign N_13[26] = N_10[26];
    assign N_13[27] = N_10[27];
    assign N_13[28] = N_10[28];
    assign N_13[29] = N_10[29];
    assign N_13[30] = N_10[30];
    assign N_13[31] = N_10[31];
    assign N_13[32] = N_10[32];
  //end Extract3
  //start Extract4
    assign N_14[0] = N_10[11];
    assign N_14[1] = N_10[12];
    assign N_14[2] = N_10[13];
    assign N_14[3] = N_10[14];
    assign N_14[4] = N_10[15];
    assign N_14[5] = N_10[16];
    assign N_14[6] = N_10[17];
    assign N_14[7] = N_10[18];
    assign N_14[8] = N_10[19];
    assign N_14[9] = N_10[20];
    assign N_14[10] = N_10[21];
    assign N_14[11] = N_10[22];
    assign N_14[12] = N_10[23];
    assign N_14[13] = N_10[24];
    assign N_14[14] = N_10[25];
    assign N_14[15] = N_10[26];
    assign N_14[16] = N_10[27];
    assign N_14[17] = N_10[28];
    assign N_14[18] = N_10[29];
    assign N_14[19] = N_10[30];
    assign N_14[20] = N_10[31];
    assign N_14[21] = N_10[32];
  //end Extract4
  //start Extract5
    assign N_15[0] = N_10[0];
    assign N_15[1] = N_10[1];
    assign N_15[2] = N_10[2];
    assign N_15[3] = N_10[3];
    assign N_15[4] = N_10[4];
    assign N_15[5] = N_10[5];
    assign N_15[6] = N_10[6];
    assign N_15[7] = N_10[7];
    assign N_15[8] = N_10[8];
    assign N_15[9] = N_10[9];
    assign N_15[10] = N_10[10];
  //end Extract5
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_20) ;
    assign med[1] = $signed(N_17) ;

    always@(*)
    begin
      if(N_21[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_21[0:0]];
    end

    assign N_16 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Mux1_block
    wire [8:0] med  [1:0];
    reg [8:0] tmpOut;
    assign med[0] = $signed(N_6) ;
    assign med[1] = $signed(N_31) ;

    always@(*)
    begin
      if(N_33[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_33[0:0]];
    end

    assign N_32 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [5:0] med ;
    wire signed [5:0] medo;
    wire [5:0] tmpOut;
    assign med = $unsigned(N_26);
    assign medo = $signed(tmpOut) ;
    assign N_17 = medo[5:0];
    synNegate #(
      .bitwidth(6)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_28) ;
    assign N_18 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_25[6:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire  [32:0] med1;
  wire  [32:0] med2;
  wire outp;
  assign med1 = $unsigned(N_10) ;
  assign med2 = $unsigned(11'b00000000000) ;
  assign N_30 = outp;
    synComparator #(
      .bitwidth(33),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Comparator1_block
  wire  [21:0] med1;
  wire  [21:0] med2;
  wire outp;
  assign med1 = $unsigned(N_14) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_8 = outp;
    synComparator #(
      .bitwidth(22),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
assign N_9 = 7'b1111111;
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter1  myLeading_Zero_Counter1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_15),
      .y(N_19)    );
    coompute_polynomial_value_Fixed_to_FP_Leading_Zero_Counter2  myLeading_Zero_Counter2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_13),
      .y(N_29)    );
    coompute_polynomial_value_Fixed_to_FP_log2  mylog2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_14),
      .Out1(N_7)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_fused_mult_add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] padd, // ufix32_En0
  input [31:0] d, // ufix32_En0
  input [31:0] c, // ufix32_En0
  input [31:0] b, // ufix32_En0
  input [31:0] a // ufix32_En0
);
wire [31:0] N_6;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen856_1_1247;  
wire [31:0] N_1;  
wire [31:0] N_3;  
wire [31:0] N_2;  
wire [31:0] N_4;  
wire [31:0] N_10;  
wire [31:0] N_9;  
wire [0:0] N_GlobalEnable1_0_1955;  
wire [31:0] N_a_0_1956;  
wire [31:0] N_b_0_1957;  
wire [31:0] N_c_0_1958;  
wire [31:0] N_d_0_1959;  
wire [31:0] N_padd_1_1960;  
wire GlobalResetSel;
assign padd = N_6;
  assign N_4 = d;
  assign N_2 = c;
  assign N_9 = b;
  assign N_10 = a;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen856_1_1247 = GlobalEnable1;
    coompute_polynomial_value_fused_mult_add_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_3),
      .z(N_6)    );
    coompute_polynomial_value_fused_mult_add_FP_Mult1  myFP_Mult1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .y(N_4),
      .z(N_3)    );
    coompute_polynomial_value_fused_mult_add_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_10),
      .y(N_9),
      .z(N_1)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module coompute_polynomial_value_FP_to_Fixed (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [20:0] y, // sfix21_En0
  input [31:0] x // ufix32_En0
);
wire [7:0] N_19;  
wire [6:0] N_18;  
wire [0:0] N_15;  
wire [22:0] N_14;  
wire [23:0] N_16;  
wire [7:0] N_20;  
wire [23:0] N_17;  
wire [0:0] N_13;  
wire [19:0] N_11;  
wire [19:0] N_5;  
wire [19:0] N_10;  
wire [31:0] N_12;  
wire [0:0] N_6;  
wire [19:0] N_4;  
wire [19:0] N_3;  
wire [23:0] N_7;  
wire [7:0] N_8;  
wire [20:0] N_9;  
wire [31:0] N_x_0_1961;  
wire [20:0] N_y_1_1962;  
wire GlobalResetSel;
assign y = N_9;
  assign N_12 = x;
  generate
  begin: Add1_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_19_0;
    wire  [8:0] tmp_N_18_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_19_0 = ($unsigned(N_19) << 0);
    assign tmp_N_18_1 = ($unsigned(N_18) << 0);
    assign  tmpOutPre =   tmp_N_19_0 - tmp_N_18_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(9), .out_width(8), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_20) );
  end // Add1_block
  endgenerate
  generate
  begin: Concat1_block
    wire [23:0] med;
    assign med = { N_15, N_14 };
    assign N_16 = med[23:0];  end // Concat1_block
  endgenerate
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_16),
      .outp(N_17)
   );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_20), .outp(N_8) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_17), .outp(N_7) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_13), .outp(N_6) );
    synDelayWithEnable #( .bitwidth(20), .preferRAMImpl(2), .delaylength(1) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(20), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_5), .outp(N_4) );
    synDelayWithEnable #( .bitwidth(20), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_10), .outp(N_3) );
  //start Extract
    assign N_14[0] = N_12[0];
    assign N_14[1] = N_12[1];
    assign N_14[2] = N_12[2];
    assign N_14[3] = N_12[3];
    assign N_14[4] = N_12[4];
    assign N_14[5] = N_12[5];
    assign N_14[6] = N_12[6];
    assign N_14[7] = N_12[7];
    assign N_14[8] = N_12[8];
    assign N_14[9] = N_12[9];
    assign N_14[10] = N_12[10];
    assign N_14[11] = N_12[11];
    assign N_14[12] = N_12[12];
    assign N_14[13] = N_12[13];
    assign N_14[14] = N_12[14];
    assign N_14[15] = N_12[15];
    assign N_14[16] = N_12[16];
    assign N_14[17] = N_12[17];
    assign N_14[18] = N_12[18];
    assign N_14[19] = N_12[19];
    assign N_14[20] = N_12[20];
    assign N_14[21] = N_12[21];
    assign N_14[22] = N_12[22];
  //end Extract
  //start Extract1
    assign N_19[0] = N_12[23];
    assign N_19[1] = N_12[24];
    assign N_19[2] = N_12[25];
    assign N_19[3] = N_12[26];
    assign N_19[4] = N_12[27];
    assign N_19[5] = N_12[28];
    assign N_19[6] = N_12[29];
    assign N_19[7] = N_12[30];
  //end Extract1
  //start Extract2
    assign N_13[0] = N_12[31];
  //end Extract2
  generate
  begin: Mux1_block
    wire [20:0] med  [1:0];
    reg [20:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $signed(N_3) ;

    always@(*)
    begin
      if(N_6[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[0:0]];
    end

    assign N_9 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Negate1_block
    wire  [20:0] med ;
    wire signed [20:0] medo;
    wire [20:0] tmpOut;
    assign med = $unsigned(N_5);
    assign medo = $signed(tmpOut) ;
    assign N_10 = medo[19:0];
    synNegate #(
      .bitwidth(21)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [43:0] medo;
    wire [43:0] tmpIn;
    assign tmpIn = (N_7) ;
    assign N_11 = medo[43:24];
    synShifterR #(
      .inpBitW(44),
      .outBitW(44),
      .shfBitW(8),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_8[7:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
assign N_18 = 7'b1111111;
assign N_15 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module syncoompute_polynomial_value_Sample_and_Hold_Shift_Register (clk,grst,rst,en,d,q0);
parameter bitwidth=21;
parameter depth=1;
input clk;
input [bitwidth-1:0] d;
input grst;
input rst;
input en;
output [bitwidth-1:0] q0;
wire [bitwidth-1:0] qTemp0;
  assign q0 = qTemp0;
    synDelayWithEnable #( .bitwidth(bitwidth), .preferRAMImpl(2), .delaylength(1) ) Delay0_block ( .clk(clk), .en(en), .grst(grst), .rst(rst), .inp(d), .outp(qTemp0) );
endmodule

//----------------------------------------------------

module coompute_polynomial_value_Sample_and_Hold (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [20:0] q, // sfix21_En0
  input en, // ufix1
  input [20:0] d // sfix21_En0
);
wire [20:0] N_3;  
wire [0:0] N_1;  
wire [20:0] N_5;  
wire [20:0] N_2;  
wire [20:0] N_4;  
wire [20:0] N_d_0_1963;  
wire [0:0] N_en_0_1964;  
wire [20:0] N_q_1_1965;  
wire GlobalResetSel;
assign q = N_4;
  assign N_1 = en;
  assign N_2 = d;
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("signed"),
      .preshift(0)
    ) Convert (
      .inp(N_3),
      .outp(N_4)
   );
  assign N_3 = (N_1 == 0) ? N_5 : N_2; // mux block
  generate
  begin: Shift_Register_block
    wire [20:0] outBuf0;
    wire rst, enab;
    assign rst = 0;
    assign enab = GlobalEnable1;
  syncoompute_polynomial_value_Sample_and_Hold_Shift_Register myShift_Register(
      .clk(clk),
      .d(N_4),
        .grst(GlobalResetSel),
        .rst(rst),
        .en(enab),
      .q0(outBuf0)
    );
    assign N_5 = outBuf0;
  end //Shift_Register_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module find_section_number (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [1:0] sec_num, // ufix2_En0
  input [19:0] sec_limit, // ufix20_En0
  input [20:0] input_syn // sfix21_En0
);
wire [20:0] N_8;  
wire [20:0] N_2;  
wire [19:0] N_7;  
wire [0:0] N_1;  
wire [0:0] N_5;  
wire [0:0] N_6;  
wire [0:0] N_4;  
wire [1:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen864_1_1255;  
wire [0:0] N_GlobalEnable1_0_1620;  
wire [20:0] N_input_syn_0_1621;  
wire [19:0] N_sec_limit_0_1622;  
wire [1:0] N_sec_num_1_1623;  
wire GlobalResetSel;
assign sec_num = N_3;
  assign N_7 = sec_limit;
  assign N_8 = input_syn;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen864_1_1255 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [21:0] med;
    wire [21:0] medo;
    wire [21:0] tmpOut;
    assign med = $signed(N_8);
    assign medo = $unsigned(tmpOut) ;
    assign N_2 = medo[20:0];
    synAbs #(
      .bitwidth(22)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Comparator_block
  wire signed [20:0] med1;
  wire signed [20:0] med2;
  wire outp;
  assign med1 = $signed(N_8) ;
  assign med2 = $signed(2'b00) ;
  assign N_1 = outp;
    synComparator #(
      .bitwidth(21),
      .datatype("signed"),
      .opr("gtr")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire  [20:0] med1;
  wire  [20:0] med2;
  wire outp;
  assign med1 = $unsigned(N_2) ;
  assign med2 = $unsigned(N_7) ;
  assign N_4 = outp;
    synComparator #(
      .bitwidth(21),
      .datatype("unsign"),
      .opr("gtr")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Concat_block
    wire [1:0] med;
    assign med = { N_1, N_5 };
    assign N_3 = med[1:0];  end // Concat_block
  endgenerate
  assign N_5 = (N_1 == 0) ? N_6 : N_4; // mux block
  generate
  begin: Binary_Logic_block
    assign N_6 = (~N_4);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module select_section_coefficients (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] stdev, // ufix32_En0
  output [31:0] mean, // ufix32_En0
  output [31:0] c_10, // ufix32_En0
  output [31:0] c_9, // ufix32_En0
  output [31:0] c_8, // ufix32_En0
  output [31:0] c_7, // ufix32_En0
  output [31:0] c_6, // ufix32_En0
  output [31:0] c_5, // ufix32_En0
  output [31:0] c_4, // ufix32_En0
  output [31:0] c_3, // ufix32_En0
  output [31:0] c_2, // ufix32_En0
  output [31:0] c_1, // ufix32_En0
  output [31:0] c_0, // ufix32_En0
  input [1:0] sec_num, // ufix2_En0
  input [31:0] coeff_1_0_porty, // ufix32_En0
  input [31:0] coeff_1_1_porty, // ufix32_En0
  input [31:0] coeff_1_10_porty, // ufix32_En0
  input [31:0] coeff_1_2_porty, // ufix32_En0
  input [31:0] coeff_1_3_porty, // ufix32_En0
  input [31:0] coeff_1_4_porty, // ufix32_En0
  input [31:0] coeff_1_5_porty, // ufix32_En0
  input [31:0] coeff_1_6_porty, // ufix32_En0
  input [31:0] coeff_1_7_porty, // ufix32_En0
  input [31:0] coeff_1_8_porty, // ufix32_En0
  input [31:0] coeff_1_9_porty, // ufix32_En0
  input [31:0] coeff_2_0_porty, // ufix32_En0
  input [31:0] coeff_2_1_porty, // ufix32_En0
  input [31:0] coeff_2_10_porty, // ufix32_En0
  input [31:0] coeff_2_2_porty, // ufix32_En0
  input [31:0] coeff_2_3_porty, // ufix32_En0
  input [31:0] coeff_2_4_porty, // ufix32_En0
  input [31:0] coeff_2_5_porty, // ufix32_En0
  input [31:0] coeff_2_6_porty, // ufix32_En0
  input [31:0] coeff_2_7_porty, // ufix32_En0
  input [31:0] coeff_2_8_porty, // ufix32_En0
  input [31:0] coeff_2_9_porty, // ufix32_En0
  input [31:0] coeff_3_0_porty, // ufix32_En0
  input [31:0] coeff_3_1_porty, // ufix32_En0
  input [31:0] coeff_3_10_porty, // ufix32_En0
  input [31:0] coeff_3_2_porty, // ufix32_En0
  input [31:0] coeff_3_3_porty, // ufix32_En0
  input [31:0] coeff_3_4_porty, // ufix32_En0
  input [31:0] coeff_3_5_porty, // ufix32_En0
  input [31:0] coeff_3_6_porty, // ufix32_En0
  input [31:0] coeff_3_7_porty, // ufix32_En0
  input [31:0] coeff_3_8_porty, // ufix32_En0
  input [31:0] coeff_3_9_porty, // ufix32_En0
  input [31:0] coeff_4_0_porty, // ufix32_En0
  input [31:0] coeff_4_1_porty, // ufix32_En0
  input [31:0] coeff_4_10_porty, // ufix32_En0
  input [31:0] coeff_4_2_porty, // ufix32_En0
  input [31:0] coeff_4_3_porty, // ufix32_En0
  input [31:0] coeff_4_4_porty, // ufix32_En0
  input [31:0] coeff_4_5_porty, // ufix32_En0
  input [31:0] coeff_4_6_porty, // ufix32_En0
  input [31:0] coeff_4_7_porty, // ufix32_En0
  input [31:0] coeff_4_8_porty, // ufix32_En0
  input [31:0] coeff_4_9_porty, // ufix32_En0
  input [31:0] mean_1_porty, // ufix32_En0
  input [31:0] mean_2_porty, // ufix32_En0
  input [31:0] mean_3_porty, // ufix32_En0
  input [31:0] mean_4_porty, // ufix32_En0
  input [31:0] stdev_1_porty, // ufix32_En0
  input [31:0] stdev_2_porty, // ufix32_En0
  input [31:0] stdev_3_porty, // ufix32_En0
  input [31:0] stdev_4_porty // ufix32_En0
);
wire [1:0] N_100;  
wire [31:0] N_27;  
wire [31:0] N_28;  
wire [31:0] N_29;  
wire [31:0] N_30;  
wire [31:0] N_49;  
wire [31:0] N_1;  
wire [31:0] N_2;  
wire [31:0] N_3;  
wire [31:0] N_72;  
wire [31:0] N_73;  
wire [31:0] N_74;  
wire [31:0] N_75;  
wire [31:0] N_80;  
wire [31:0] N_81;  
wire [31:0] N_82;  
wire [31:0] N_83;  
wire [31:0] N_96;  
wire [31:0] N_97;  
wire [31:0] N_98;  
wire [31:0] N_99;  
wire [31:0] N_88;  
wire [31:0] N_89;  
wire [31:0] N_90;  
wire [31:0] N_91;  
wire [31:0] N_105;  
wire [31:0] N_106;  
wire [31:0] N_107;  
wire [31:0] N_108;  
wire [31:0] N_4;  
wire [31:0] N_5;  
wire [31:0] N_6;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_11;  
wire [31:0] N_10;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_15;  
wire [31:0] N_14;  
wire [31:0] N_16;  
wire [31:0] N_17;  
wire [31:0] N_19;  
wire [31:0] N_18;  
wire [31:0] N_64;  
wire [31:0] N_65;  
wire [31:0] N_66;  
wire [31:0] N_67;  
wire [31:0] N_113;  
wire [31:0] N_114;  
wire [31:0] N_115;  
wire [31:0] N_116;  
wire [31:0] N_118;  
wire [31:0] N_117;  
wire [31:0] N_59;  
wire [31:0] N_56;  
wire [31:0] N_57;  
wire [31:0] N_55;  
wire [31:0] N_58;  
wire [31:0] N_26;  
wire [31:0] N_24;  
wire [31:0] N_54;  
wire [31:0] N_53;  
wire [31:0] N_52;  
wire [31:0] N_51;  
wire [31:0] N_porty_1_2;  
wire [31:0] N_porty_1_8;  
wire [31:0] N_porty_1_14;  
wire [31:0] N_porty_1_20;  
wire [31:0] N_porty_1_26;  
wire [31:0] N_porty_1_32;  
wire [31:0] N_porty_1_38;  
wire [31:0] N_porty_1_44;  
wire [31:0] N_porty_1_50;  
wire [31:0] N_porty_1_56;  
wire [31:0] N_porty_1_62;  
wire [31:0] N_porty_1_68;  
wire [31:0] N_porty_1_74;  
wire [31:0] N_porty_1_80;  
wire [31:0] N_porty_1_86;  
wire [31:0] N_porty_1_92;  
wire [31:0] N_porty_1_98;  
wire [31:0] N_porty_1_104;  
wire [31:0] N_porty_1_110;  
wire [31:0] N_porty_1_116;  
wire [31:0] N_porty_1_122;  
wire [31:0] N_porty_1_128;  
wire [31:0] N_porty_1_134;  
wire [31:0] N_porty_1_140;  
wire [31:0] N_porty_1_146;  
wire [31:0] N_porty_1_152;  
wire [31:0] N_porty_1_158;  
wire [31:0] N_porty_1_164;  
wire [31:0] N_porty_1_170;  
wire [31:0] N_porty_1_176;  
wire [31:0] N_porty_1_182;  
wire [31:0] N_porty_1_188;  
wire [31:0] N_porty_1_194;  
wire [31:0] N_porty_1_200;  
wire [31:0] N_porty_1_206;  
wire [31:0] N_porty_1_212;  
wire [31:0] N_porty_1_218;  
wire [31:0] N_porty_1_224;  
wire [31:0] N_porty_1_230;  
wire [31:0] N_porty_1_236;  
wire [31:0] N_porty_1_242;  
wire [31:0] N_porty_1_248;  
wire [31:0] N_porty_1_254;  
wire [31:0] N_porty_1_260;  
wire [31:0] N_porty_1_266;  
wire [31:0] N_porty_1_272;  
wire [31:0] N_porty_1_278;  
wire [31:0] N_porty_1_284;  
wire [31:0] N_porty_1_290;  
wire [31:0] N_porty_1_296;  
wire [31:0] N_porty_1_302;  
wire [31:0] N_porty_1_308;  
wire [31:0] N_stdev_4_porty_0_1728;  
wire [31:0] N_stdev_3_porty_0_1729;  
wire [31:0] N_stdev_2_porty_0_1730;  
wire [31:0] N_stdev_1_porty_0_1731;  
wire [31:0] N_mean_4_porty_0_1732;  
wire [31:0] N_mean_3_porty_0_1733;  
wire [31:0] N_mean_2_porty_0_1734;  
wire [31:0] N_mean_1_porty_0_1735;  
wire [31:0] N_coeff_4_9_porty_0_1736;  
wire [31:0] N_coeff_4_8_porty_0_1737;  
wire [31:0] N_coeff_4_7_porty_0_1738;  
wire [31:0] N_coeff_4_6_porty_0_1739;  
wire [31:0] N_coeff_4_5_porty_0_1740;  
wire [31:0] N_coeff_4_4_porty_0_1741;  
wire [31:0] N_coeff_4_3_porty_0_1742;  
wire [31:0] N_coeff_4_2_porty_0_1743;  
wire [31:0] N_coeff_4_10_porty_0_1744;  
wire [31:0] N_coeff_4_1_porty_0_1745;  
wire [31:0] N_coeff_4_0_porty_0_1746;  
wire [31:0] N_coeff_3_9_porty_0_1747;  
wire [31:0] N_coeff_3_8_porty_0_1748;  
wire [31:0] N_coeff_3_7_porty_0_1749;  
wire [31:0] N_coeff_3_6_porty_0_1750;  
wire [31:0] N_coeff_3_5_porty_0_1751;  
wire [31:0] N_coeff_3_4_porty_0_1752;  
wire [31:0] N_coeff_3_3_porty_0_1753;  
wire [31:0] N_coeff_3_2_porty_0_1754;  
wire [31:0] N_coeff_3_10_porty_0_1755;  
wire [31:0] N_coeff_3_1_porty_0_1756;  
wire [31:0] N_coeff_3_0_porty_0_1757;  
wire [31:0] N_coeff_2_9_porty_0_1758;  
wire [31:0] N_coeff_2_8_porty_0_1759;  
wire [31:0] N_coeff_2_7_porty_0_1760;  
wire [31:0] N_coeff_2_6_porty_0_1761;  
wire [31:0] N_coeff_2_5_porty_0_1762;  
wire [31:0] N_coeff_2_4_porty_0_1763;  
wire [31:0] N_coeff_2_3_porty_0_1764;  
wire [31:0] N_coeff_2_2_porty_0_1765;  
wire [31:0] N_coeff_2_10_porty_0_1766;  
wire [31:0] N_coeff_2_1_porty_0_1767;  
wire [31:0] N_coeff_2_0_porty_0_1768;  
wire [31:0] N_coeff_1_9_porty_0_1769;  
wire [31:0] N_coeff_1_8_porty_0_1770;  
wire [31:0] N_coeff_1_7_porty_0_1771;  
wire [31:0] N_coeff_1_6_porty_0_1772;  
wire [31:0] N_coeff_1_5_porty_0_1773;  
wire [31:0] N_coeff_1_4_porty_0_1774;  
wire [31:0] N_coeff_1_3_porty_0_1775;  
wire [31:0] N_coeff_1_2_porty_0_1776;  
wire [31:0] N_coeff_1_10_porty_0_1777;  
wire [31:0] N_coeff_1_1_porty_0_1778;  
wire [31:0] N_coeff_1_0_porty_0_1779;  
wire [1:0] N_sec_num_0_1780;  
wire [31:0] N_c_0_1_1781;  
wire [31:0] N_c_1_1_1782;  
wire [31:0] N_c_2_1_1783;  
wire [31:0] N_c_3_1_1784;  
wire [31:0] N_c_4_1_1785;  
wire [31:0] N_c_5_1_1786;  
wire [31:0] N_c_6_1_1787;  
wire [31:0] N_c_7_1_1788;  
wire [31:0] N_c_8_1_1789;  
wire [31:0] N_c_9_1_1790;  
wire [31:0] N_c_10_1_1791;  
wire [31:0] N_mean_1_1792;  
wire [31:0] N_stdev_1_1793;  
wire GlobalResetSel;
assign stdev = N_118;
assign mean = N_117;
assign c_10 = N_59;
assign c_9 = N_56;
assign c_8 = N_57;
assign c_7 = N_55;
assign c_6 = N_58;
assign c_5 = N_26;
assign c_4 = N_24;
assign c_3 = N_54;
assign c_2 = N_53;
assign c_1 = N_52;
assign c_0 = N_51;
  assign N_100 = sec_num;
  assign N_porty_1_308 = coeff_1_0_porty;
  assign N_porty_1_302 = coeff_1_1_porty;
  assign N_porty_1_296 = coeff_1_10_porty;
  assign N_porty_1_290 = coeff_1_2_porty;
  assign N_porty_1_284 = coeff_1_3_porty;
  assign N_porty_1_278 = coeff_1_4_porty;
  assign N_porty_1_272 = coeff_1_5_porty;
  assign N_porty_1_266 = coeff_1_6_porty;
  assign N_porty_1_260 = coeff_1_7_porty;
  assign N_porty_1_254 = coeff_1_8_porty;
  assign N_porty_1_248 = coeff_1_9_porty;
  assign N_porty_1_242 = coeff_2_0_porty;
  assign N_porty_1_236 = coeff_2_1_porty;
  assign N_porty_1_230 = coeff_2_10_porty;
  assign N_porty_1_224 = coeff_2_2_porty;
  assign N_porty_1_218 = coeff_2_3_porty;
  assign N_porty_1_212 = coeff_2_4_porty;
  assign N_porty_1_206 = coeff_2_5_porty;
  assign N_porty_1_200 = coeff_2_6_porty;
  assign N_porty_1_194 = coeff_2_7_porty;
  assign N_porty_1_188 = coeff_2_8_porty;
  assign N_porty_1_182 = coeff_2_9_porty;
  assign N_porty_1_176 = coeff_3_0_porty;
  assign N_porty_1_170 = coeff_3_1_porty;
  assign N_porty_1_164 = coeff_3_10_porty;
  assign N_porty_1_158 = coeff_3_2_porty;
  assign N_porty_1_152 = coeff_3_3_porty;
  assign N_porty_1_146 = coeff_3_4_porty;
  assign N_porty_1_140 = coeff_3_5_porty;
  assign N_porty_1_134 = coeff_3_6_porty;
  assign N_porty_1_128 = coeff_3_7_porty;
  assign N_porty_1_122 = coeff_3_8_porty;
  assign N_porty_1_116 = coeff_3_9_porty;
  assign N_porty_1_110 = coeff_4_0_porty;
  assign N_porty_1_104 = coeff_4_1_porty;
  assign N_porty_1_98 = coeff_4_10_porty;
  assign N_porty_1_92 = coeff_4_2_porty;
  assign N_porty_1_86 = coeff_4_3_porty;
  assign N_porty_1_80 = coeff_4_4_porty;
  assign N_porty_1_74 = coeff_4_5_porty;
  assign N_porty_1_68 = coeff_4_6_porty;
  assign N_porty_1_62 = coeff_4_7_porty;
  assign N_porty_1_56 = coeff_4_8_porty;
  assign N_porty_1_50 = coeff_4_9_porty;
  assign N_porty_1_44 = mean_1_porty;
  assign N_porty_1_38 = mean_2_porty;
  assign N_porty_1_32 = mean_3_porty;
  assign N_porty_1_26 = mean_4_porty;
  assign N_porty_1_20 = stdev_1_porty;
  assign N_porty_1_14 = stdev_2_porty;
  assign N_porty_1_8 = stdev_3_porty;
  assign N_porty_1_2 = stdev_4_porty;
  generate
  begin: Mux0_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_27) ;
    assign med[1] = $unsigned(N_28) ;
    assign med[2] = $unsigned(N_29) ;
    assign med[3] = $unsigned(N_30) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_51 = tmpOut;
  end // Mux0_Block
  endgenerate
  generate
  begin: Mux1_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_49) ;
    assign med[1] = $unsigned(N_1) ;
    assign med[2] = $unsigned(N_2) ;
    assign med[3] = $unsigned(N_3) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_52 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux10_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_72) ;
    assign med[1] = $unsigned(N_73) ;
    assign med[2] = $unsigned(N_74) ;
    assign med[3] = $unsigned(N_75) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_55 = tmpOut;
  end // Mux10_Block
  endgenerate
  generate
  begin: Mux11_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_80) ;
    assign med[1] = $unsigned(N_81) ;
    assign med[2] = $unsigned(N_82) ;
    assign med[3] = $unsigned(N_83) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_57 = tmpOut;
  end // Mux11_Block
  endgenerate
  generate
  begin: Mux12_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_96) ;
    assign med[1] = $unsigned(N_97) ;
    assign med[2] = $unsigned(N_98) ;
    assign med[3] = $unsigned(N_99) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_56 = tmpOut;
  end // Mux12_Block
  endgenerate
  generate
  begin: Mux13_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_88) ;
    assign med[1] = $unsigned(N_89) ;
    assign med[2] = $unsigned(N_90) ;
    assign med[3] = $unsigned(N_91) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_59 = tmpOut;
  end // Mux13_Block
  endgenerate
  generate
  begin: Mux14_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_105) ;
    assign med[1] = $unsigned(N_106) ;
    assign med[2] = $unsigned(N_107) ;
    assign med[3] = $unsigned(N_108) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_118 = tmpOut;
  end // Mux14_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_5) ;
    assign med[2] = $unsigned(N_6) ;
    assign med[3] = $unsigned(N_7) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_53 = tmpOut;
  end // Mux2_Block
  endgenerate
  generate
  begin: Mux3_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_8) ;
    assign med[1] = $unsigned(N_9) ;
    assign med[2] = $unsigned(N_11) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_54 = tmpOut;
  end // Mux3_Block
  endgenerate
  generate
  begin: Mux4_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_12) ;
    assign med[1] = $unsigned(N_13) ;
    assign med[2] = $unsigned(N_15) ;
    assign med[3] = $unsigned(N_14) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_24 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Mux5_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_17) ;
    assign med[2] = $unsigned(N_19) ;
    assign med[3] = $unsigned(N_18) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_26 = tmpOut;
  end // Mux5_Block
  endgenerate
  generate
  begin: Mux7_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_65) ;
    assign med[2] = $unsigned(N_66) ;
    assign med[3] = $unsigned(N_67) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_58 = tmpOut;
  end // Mux7_Block
  endgenerate
  generate
  begin: Mux9_block
    wire [31:0] med  [3:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_113) ;
    assign med[1] = $unsigned(N_114) ;
    assign med[2] = $unsigned(N_115) ;
    assign med[3] = $unsigned(N_116) ;

    always@(*)
    begin
      if(N_100[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_100[1:0]];
    end

    assign N_117 = tmpOut;
  end // Mux9_Block
  endgenerate
    select_section_coefficients_coeff_1_0  mystdev_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_2),
      .y(N_108)    );
    select_section_coefficients_coeff_1_0  mystdev_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_8),
      .y(N_107)    );
    select_section_coefficients_coeff_1_0  mystdev_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_14),
      .y(N_106)    );
    select_section_coefficients_coeff_1_0  mystdev_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_20),
      .y(N_105)    );
    select_section_coefficients_coeff_1_0  mymean_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_26),
      .y(N_116)    );
    select_section_coefficients_coeff_1_0  mymean_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_32),
      .y(N_115)    );
    select_section_coefficients_coeff_1_0  mymean_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_38),
      .y(N_114)    );
    select_section_coefficients_coeff_1_0  mymean_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_44),
      .y(N_113)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_50),
      .y(N_99)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_56),
      .y(N_83)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_62),
      .y(N_75)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_68),
      .y(N_67)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_74),
      .y(N_18)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_80),
      .y(N_14)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_86),
      .y(N_10)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_92),
      .y(N_7)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_98),
      .y(N_91)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_104),
      .y(N_3)    );
    select_section_coefficients_coeff_1_0  mycoeff_4_0 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_110),
      .y(N_30)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_116),
      .y(N_98)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_122),
      .y(N_82)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_128),
      .y(N_74)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_134),
      .y(N_66)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_140),
      .y(N_19)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_146),
      .y(N_15)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_152),
      .y(N_11)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_158),
      .y(N_6)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_164),
      .y(N_90)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_170),
      .y(N_2)    );
    select_section_coefficients_coeff_1_0  mycoeff_3_0 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_176),
      .y(N_29)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_182),
      .y(N_97)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_188),
      .y(N_81)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_194),
      .y(N_73)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_200),
      .y(N_65)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_206),
      .y(N_17)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_212),
      .y(N_13)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_218),
      .y(N_9)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_224),
      .y(N_5)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_230),
      .y(N_89)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_236),
      .y(N_1)    );
    select_section_coefficients_coeff_1_0  mycoeff_2_0 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_242),
      .y(N_28)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_248),
      .y(N_96)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_254),
      .y(N_80)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_260),
      .y(N_72)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_266),
      .y(N_64)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_272),
      .y(N_16)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_278),
      .y(N_12)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_284),
      .y(N_8)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_290),
      .y(N_4)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_296),
      .y(N_88)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_302),
      .y(N_49)    );
    select_section_coefficients_coeff_1_0  mycoeff_1_0 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_308),
      .y(N_27)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module syncoompute_polynomial_value_Shift_Register1 (clk,grst,rst,en,d,q0);
parameter bitwidth=32;
parameter depth=1;
input clk;
input [bitwidth-1:0] d;
input grst;
input rst;
input en;
output [bitwidth-1:0] q0;
wire [bitwidth-1:0] qTemp0;
  assign q0 = qTemp0;
    synDelayWithEnable #( .bitwidth(bitwidth), .preferRAMImpl(2), .delaylength(1) ) Delay0_block ( .clk(clk), .en(en), .grst(grst), .rst(rst), .inp(d), .outp(qTemp0) );
endmodule

//----------------------------------------------------

module syncoompute_polynomial_value_Shift_Register (clk,grst,rst,en,d,q0);
parameter bitwidth=32;
parameter depth=1;
input clk;
input [bitwidth-1:0] d;
input grst;
input rst;
input en;
output [bitwidth-1:0] q0;
wire [bitwidth-1:0] qTemp0;
  assign q0 = qTemp0;
    synDelayWithEnable #( .bitwidth(bitwidth), .preferRAMImpl(2), .delaylength(1) ) Delay0_block ( .clk(clk), .en(en), .grst(grst), .rst(rst), .inp(d), .outp(qTemp0) );
endmodule

//----------------------------------------------------

module coompute_polynomial_value (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output srdyo, // ufix1
  output [20:0] x_out, // sfix21_En0
  input [31:0] stdev, // ufix32_En0
  input [31:0] mean, // ufix32_En0
  input [31:0] coeff_10, // ufix32_En0
  input [31:0] coeff_9, // ufix32_En0
  input [31:0] coeff_8, // ufix32_En0
  input [31:0] coeff_7, // ufix32_En0
  input [31:0] coeff_6, // ufix32_En0
  input [31:0] coeff_5, // ufix32_En0
  input [31:0] coeff_4, // ufix32_En0
  input [31:0] coeff_3, // ufix32_En0
  input [31:0] coeff_2, // ufix32_En0
  input [31:0] coeff_1, // ufix32_En0
  input [31:0] coeff_0, // ufix32_En0
  input [20:0] x_in, // sfix21_En0
  input srdyi // ufix1
);
wire [7:0] N_5;  
wire [20:0] N_23;  
wire [0:0] N_56;  
wire [0:0] N_52;  
wire [31:0] N_9;  
wire [31:0] N_8;  
wire [0:0] N_53;  
wire [31:0] N_11;  
wire [31:0] N_10;  
wire [0:0] N_63;  
wire [31:0] N_35;  
wire [31:0] N_34;  
wire [0:0] N_46;  
wire [31:0] N_43;  
wire [31:0] N_41;  
wire [31:0] N_18;  
wire [31:0] N_44;  
wire [0:0] N_54;  
wire [31:0] N_13;  
wire [31:0] N_12;  
wire [31:0] N_47;  
wire [31:0] N_50;  
wire [31:0] N_21;  
wire [0:0] N_57;  
wire [31:0] N_15;  
wire [31:0] N_14;  
wire [0:0] N_58;  
wire [31:0] N_17;  
wire [31:0] N_16;  
wire [31:0] N_27;  
wire [31:0] N_26;  
wire [0:0] N_59;  
wire [31:0] N_39;  
wire [31:0] N_40;  
wire [0:0] N_60;  
wire [31:0] N_31;  
wire [31:0] N_38;  
wire [0:0] N_61;  
wire [31:0] N_32;  
wire [31:0] N_37;  
wire [0:0] N_62;  
wire [31:0] N_33;  
wire [31:0] N_36;  
wire [31:0] N_25;  
wire [0:0] N_51;  
wire [0:0] N_29;  
wire [20:0] N_28;  
wire [0:0] N_2;  
wire [0:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_1237;  
wire [0:0] N_3;  
wire [0:0] N_4;  
wire [0:0] N_6;  
wire [0:0] N_7;  
wire [31:0] N_24;  
wire [31:0] N_48;  
wire [31:0] N_49;  
wire [31:0] N_45;  
wire [31:0] N_42;  
wire [20:0] N_20;  
wire [0:0] N_GlobalEnable1_0_1966;  
wire [0:0] N_srdyi_0_1967;  
wire [20:0] N_x_in_0_1968;  
wire [31:0] N_coeff_0_0_1969;  
wire [31:0] N_coeff_1_0_1970;  
wire [31:0] N_coeff_2_0_1971;  
wire [31:0] N_coeff_3_0_1972;  
wire [31:0] N_coeff_4_0_1973;  
wire [31:0] N_coeff_5_0_1974;  
wire [31:0] N_coeff_6_0_1975;  
wire [31:0] N_coeff_7_0_1976;  
wire [31:0] N_coeff_8_0_1977;  
wire [31:0] N_coeff_9_0_1978;  
wire [31:0] N_coeff_10_0_1979;  
wire [31:0] N_mean_0_1980;  
wire [31:0] N_stdev_0_1981;  
wire [20:0] N_x_out_1_1982;  
wire [0:0] N_srdyo_1_1983;  
wire GlobalResetSel;
assign srdyo = N_29;
assign x_out = N_28;
  assign N_41 = stdev;
  assign N_44 = mean;
  assign N_8 = coeff_10;
  assign N_10 = coeff_9;
  assign N_12 = coeff_8;
  assign N_14 = coeff_7;
  assign N_16 = coeff_6;
  assign N_40 = coeff_5;
  assign N_38 = coeff_4;
  assign N_37 = coeff_3;
  assign N_36 = coeff_2;
  assign N_34 = coeff_1;
  assign N_35 = coeff_0;
  assign N_20 = x_in;
  assign N_2 = srdyi;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_1237 = GlobalEnable1;
  generate
  begin: Comparator17_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(5'b10011) ;
  assign N_51 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator17 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator17_block;
  endgenerate
  generate
  begin: Comparator19_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b11000100) ;
  assign N_56 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator19 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator19_block;
  endgenerate
  generate
  begin: Comparator21_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b11001000) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator21 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator21_block;
  endgenerate
  generate
  begin: Comparator9_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(3'b100) ;
  assign N_6 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator9 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator9_block;
  endgenerate
  synBusAdapter #(
      .inp_width(21),
      .out_width(32),
      .datatype("signed"),
      .preshift(-11)
    ) Convert (
      .inp(N_23),
      .outp(N_24)
   );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_56), .outp(N_29) );
  assign N_18 = (N_52 == 0) ? N_9 : N_8; // mux block
  assign N_9 = (N_53 == 0) ? N_11 : N_10; // mux block
  assign N_33 = (N_63 == 0) ? N_35 : N_34; // mux block
  assign N_42 = (N_46 == 0) ? N_43 : N_41; // mux block
  assign N_45 = (N_46 == 0) ? N_18 : N_44; // mux block
  assign N_11 = (N_54 == 0) ? N_13 : N_12; // mux block
  assign N_48 = (N_46 == 0) ? N_47 : N_41; // mux block
  assign N_49 = (N_46 == 0) ? N_50 : N_21; // mux block
  assign N_13 = (N_57 == 0) ? N_15 : N_14; // mux block
  assign N_15 = (N_58 == 0) ? N_17 : N_16; // mux block
  assign N_47 = (N_46 == 0) ? N_27 : N_26; // mux block
  assign N_17 = (N_59 == 0) ? N_39 : N_40; // mux block
  assign N_39 = (N_60 == 0) ? N_31 : N_38; // mux block
  assign N_31 = (N_61 == 0) ? N_32 : N_37; // mux block
  assign N_32 = (N_62 == 0) ? N_33 : N_36; // mux block
  generate
  begin: Shift_Register_block
    wire [31:0] outBuf0;
    wire rst, enab;
    assign rst = N_51[0] && GlobalEnable1;
    assign enab = GlobalEnable1;
  syncoompute_polynomial_value_Shift_Register myShift_Register(
      .clk(clk),
      .d(N_25),
        .grst(GlobalResetSel),
        .rst(rst),
        .en(enab),
      .q0(outBuf0)
    );
    assign N_27 = outBuf0;
  end //Shift_Register_block;
  endgenerate
  generate
  begin: Shift_Register1_block
    wire [31:0] outBuf0;
    wire rst, enab;
    assign rst = 0;
    assign enab = N_51[0] && GlobalEnable1;
  syncoompute_polynomial_value_Shift_Register1 myShift_Register1(
      .clk(clk),
      .d(N_25),
        .grst(GlobalResetSel),
        .rst(rst),
        .en(enab),
      .q0(outBuf0)
    );
    assign N_50 = outBuf0;
  end //Shift_Register1_block;
  endgenerate
generate
begin:  Counter5_block
wire [7:0] ldIn;
wire rst, en, enloc;
    assign enloc = N_1[0];
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_1237[0]);
    assign rst = N_2[0] && N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_1237[0];
assign ldIn = 8'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b1),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(200),
        .bitwidth(8),
        .isSigned('b0)
      ) myCounter5 (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_5)
      );
    end
  endgenerate
  generate
  begin: Comparator8_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(7'b1010011) ;
  assign N_57 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator8 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator8_block;
  endgenerate
  generate
  begin: Comparator7_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(7'b1000011) ;
  assign N_54 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator7 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator7_block;
  endgenerate
  generate
  begin: Comparator6_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(6'b110011) ;
  assign N_53 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator6 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator6_block;
  endgenerate
  generate
  begin: Comparator5_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(7'b1100011) ;
  assign N_58 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator5 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator5_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(6'b100011) ;
  assign N_52 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Comparator16_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b10110011) ;
  assign N_63 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator16 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator16_block;
  endgenerate
  generate
  begin: Comparator15_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b10100011) ;
  assign N_62 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator15 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator15_block;
  endgenerate
  generate
  begin: Comparator14_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b10010011) ;
  assign N_61 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator14 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator14_block;
  endgenerate
  generate
  begin: Comparator13_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(8'b10000011) ;
  assign N_60 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator13 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator13_block;
  endgenerate
  generate
  begin: Comparator12_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(7'b1110011) ;
  assign N_59 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator12 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator12_block;
  endgenerate
  generate
  begin: Comparator1_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(5'b10011) ;
  assign N_7 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("leq")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_4 = (~N_3);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_1 = (N_2 | N_4);
  end // Binary_Logic1_block;
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_46 = (N_6 & N_7);
  end // Binary_Logic_block;
  endgenerate
assign N_26 = 32'b10000000110111011101000001000110;
assign N_43 = 32'b01000000000000000000000000000000;
    coompute_polynomial_value_Fixed_to_FP  myFixed_to_FP (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_24),
      .y(N_21)    );
    coompute_polynomial_value_fused_mult_add  myfused_mult_add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .a(N_48),
      .b(N_49),
      .c(N_45),
      .d(N_42),
      .padd(N_25)    );
    coompute_polynomial_value_FP_to_Fixed  myFP_to_Fixed (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_27),
      .y(N_28)    );
    coompute_polynomial_value_Sample_and_Hold  mySample_and_Hold (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .d(N_20),
      .en(N_2),
      .q(N_23)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module NLC_4sec_10th_order_1ch_v0 (
  input clk,
  input GlobalReset,
  input [31:0] select_section_coefficients_stdev_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_stdev_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_stdev_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_stdev_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_mean_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_mean_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_mean_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_mean_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_9_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_8_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_7_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_6_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_5_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_10_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_4_0_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_9_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_8_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_7_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_6_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_5_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_10_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_3_0_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_9_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_8_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_7_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_6_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_5_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_10_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_2_0_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_9_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_8_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_7_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_6_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_5_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_4_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_3_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_2_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_10_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_1_porty, // ufix32_En0
  input [31:0] select_section_coefficients_coeff_1_0_porty, // ufix32_En0
  output [20:0] x_lin, // sfix21_En0
  input [20:0] x_adc, // sfix21_En0
  output srdyo, // ufix1
  input srdyi, // ufix1
  input [19:0] section_limit // ufix20_En0
//@
);
//@

wire [20:0] N_7;  
wire [0:0] N_8;  
wire [19:0] N_10;  
wire [31:0] select_section_coefficients_N_coeff_1_0_porty_1_341;  
wire [31:0] select_section_coefficients_N_coeff_1_1_porty_1_345;  
wire [31:0] select_section_coefficients_N_coeff_1_10_porty_1_349;  
wire [31:0] select_section_coefficients_N_coeff_1_2_porty_1_353;  
wire [31:0] select_section_coefficients_N_coeff_1_3_porty_1_357;  
wire [31:0] select_section_coefficients_N_coeff_1_4_porty_1_361;  
wire [31:0] select_section_coefficients_N_coeff_1_5_porty_1_365;  
wire [31:0] select_section_coefficients_N_coeff_1_6_porty_1_369;  
wire [31:0] select_section_coefficients_N_coeff_1_7_porty_1_373;  
wire [31:0] select_section_coefficients_N_coeff_1_8_porty_1_377;  
wire [31:0] select_section_coefficients_N_coeff_1_9_porty_1_381;  
wire [31:0] select_section_coefficients_N_coeff_2_0_porty_1_385;  
wire [31:0] select_section_coefficients_N_coeff_2_1_porty_1_389;  
wire [31:0] select_section_coefficients_N_coeff_2_10_porty_1_393;  
wire [31:0] select_section_coefficients_N_coeff_2_2_porty_1_397;  
wire [31:0] select_section_coefficients_N_coeff_2_3_porty_1_401;  
wire [31:0] select_section_coefficients_N_coeff_2_4_porty_1_405;  
wire [31:0] select_section_coefficients_N_coeff_2_5_porty_1_409;  
wire [31:0] select_section_coefficients_N_coeff_2_6_porty_1_413;  
wire [31:0] select_section_coefficients_N_coeff_2_7_porty_1_417;  
wire [31:0] select_section_coefficients_N_coeff_2_8_porty_1_421;  
wire [31:0] select_section_coefficients_N_coeff_2_9_porty_1_425;  
wire [31:0] select_section_coefficients_N_coeff_3_0_porty_1_429;  
wire [31:0] select_section_coefficients_N_coeff_3_1_porty_1_433;  
wire [31:0] select_section_coefficients_N_coeff_3_10_porty_1_437;  
wire [31:0] select_section_coefficients_N_coeff_3_2_porty_1_441;  
wire [31:0] select_section_coefficients_N_coeff_3_3_porty_1_445;  
wire [31:0] select_section_coefficients_N_coeff_3_4_porty_1_449;  
wire [31:0] select_section_coefficients_N_coeff_3_5_porty_1_453;  
wire [31:0] select_section_coefficients_N_coeff_3_6_porty_1_457;  
wire [31:0] select_section_coefficients_N_coeff_3_7_porty_1_461;  
wire [31:0] select_section_coefficients_N_coeff_3_8_porty_1_465;  
wire [31:0] select_section_coefficients_N_coeff_3_9_porty_1_469;  
wire [31:0] select_section_coefficients_N_coeff_4_0_porty_1_473;  
wire [31:0] select_section_coefficients_N_coeff_4_1_porty_1_477;  
wire [31:0] select_section_coefficients_N_coeff_4_10_porty_1_481;  
wire [31:0] select_section_coefficients_N_coeff_4_2_porty_1_485;  
wire [31:0] select_section_coefficients_N_coeff_4_3_porty_1_489;  
wire [31:0] select_section_coefficients_N_coeff_4_4_porty_1_493;  
wire [31:0] select_section_coefficients_N_coeff_4_5_porty_1_497;  
wire [31:0] select_section_coefficients_N_coeff_4_6_porty_1_501;  
wire [31:0] select_section_coefficients_N_coeff_4_7_porty_1_505;  
wire [31:0] select_section_coefficients_N_coeff_4_8_porty_1_509;  
wire [31:0] select_section_coefficients_N_coeff_4_9_porty_1_513;  
wire [31:0] select_section_coefficients_N_mean_1_porty_1_517;  
wire [31:0] select_section_coefficients_N_mean_2_porty_1_521;  
wire [31:0] select_section_coefficients_N_mean_3_porty_1_525;  
wire [31:0] select_section_coefficients_N_mean_4_porty_1_529;  
wire [31:0] select_section_coefficients_N_stdev_1_porty_1_533;  
wire [31:0] select_section_coefficients_N_stdev_2_porty_1_537;  
wire [31:0] select_section_coefficients_N_stdev_3_porty_1_541;  
wire [31:0] select_section_coefficients_N_stdev_4_porty_1_545;  
wire [0:0] GlobalEnableSignal1;  
wire [20:0] N_5;  
wire [0:0] N_6;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_20;  
wire [31:0] N_21;  
wire [31:0] N_22;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [31:0] N_17;  
wire [31:0] N_18;  
wire [31:0] N_19;  
wire [31:0] N_23;  
wire [31:0] N_24;  
wire [1:0] N_11;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    find_section_number  myfind_section_number (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .input_syn(N_7),
      .sec_limit(N_10),
      .sec_num(N_11)    );
    select_section_coefficients  myselect_section_coefficients (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .stdev_4_porty(select_section_coefficients_N_stdev_4_porty_1_545),
      .stdev_3_porty(select_section_coefficients_N_stdev_3_porty_1_541),
      .stdev_2_porty(select_section_coefficients_N_stdev_2_porty_1_537),
      .stdev_1_porty(select_section_coefficients_N_stdev_1_porty_1_533),
      .mean_4_porty(select_section_coefficients_N_mean_4_porty_1_529),
      .mean_3_porty(select_section_coefficients_N_mean_3_porty_1_525),
      .mean_2_porty(select_section_coefficients_N_mean_2_porty_1_521),
      .mean_1_porty(select_section_coefficients_N_mean_1_porty_1_517),
      .coeff_4_9_porty(select_section_coefficients_N_coeff_4_9_porty_1_513),
      .coeff_4_8_porty(select_section_coefficients_N_coeff_4_8_porty_1_509),
      .coeff_4_7_porty(select_section_coefficients_N_coeff_4_7_porty_1_505),
      .coeff_4_6_porty(select_section_coefficients_N_coeff_4_6_porty_1_501),
      .coeff_4_5_porty(select_section_coefficients_N_coeff_4_5_porty_1_497),
      .coeff_4_4_porty(select_section_coefficients_N_coeff_4_4_porty_1_493),
      .coeff_4_3_porty(select_section_coefficients_N_coeff_4_3_porty_1_489),
      .coeff_4_2_porty(select_section_coefficients_N_coeff_4_2_porty_1_485),
      .coeff_4_10_porty(select_section_coefficients_N_coeff_4_10_porty_1_481),
      .coeff_4_1_porty(select_section_coefficients_N_coeff_4_1_porty_1_477),
      .coeff_4_0_porty(select_section_coefficients_N_coeff_4_0_porty_1_473),
      .coeff_3_9_porty(select_section_coefficients_N_coeff_3_9_porty_1_469),
      .coeff_3_8_porty(select_section_coefficients_N_coeff_3_8_porty_1_465),
      .coeff_3_7_porty(select_section_coefficients_N_coeff_3_7_porty_1_461),
      .coeff_3_6_porty(select_section_coefficients_N_coeff_3_6_porty_1_457),
      .coeff_3_5_porty(select_section_coefficients_N_coeff_3_5_porty_1_453),
      .coeff_3_4_porty(select_section_coefficients_N_coeff_3_4_porty_1_449),
      .coeff_3_3_porty(select_section_coefficients_N_coeff_3_3_porty_1_445),
      .coeff_3_2_porty(select_section_coefficients_N_coeff_3_2_porty_1_441),
      .coeff_3_10_porty(select_section_coefficients_N_coeff_3_10_porty_1_437),
      .coeff_3_1_porty(select_section_coefficients_N_coeff_3_1_porty_1_433),
      .coeff_3_0_porty(select_section_coefficients_N_coeff_3_0_porty_1_429),
      .coeff_2_9_porty(select_section_coefficients_N_coeff_2_9_porty_1_425),
      .coeff_2_8_porty(select_section_coefficients_N_coeff_2_8_porty_1_421),
      .coeff_2_7_porty(select_section_coefficients_N_coeff_2_7_porty_1_417),
      .coeff_2_6_porty(select_section_coefficients_N_coeff_2_6_porty_1_413),
      .coeff_2_5_porty(select_section_coefficients_N_coeff_2_5_porty_1_409),
      .coeff_2_4_porty(select_section_coefficients_N_coeff_2_4_porty_1_405),
      .coeff_2_3_porty(select_section_coefficients_N_coeff_2_3_porty_1_401),
      .coeff_2_2_porty(select_section_coefficients_N_coeff_2_2_porty_1_397),
      .coeff_2_10_porty(select_section_coefficients_N_coeff_2_10_porty_1_393),
      .coeff_2_1_porty(select_section_coefficients_N_coeff_2_1_porty_1_389),
      .coeff_2_0_porty(select_section_coefficients_N_coeff_2_0_porty_1_385),
      .coeff_1_9_porty(select_section_coefficients_N_coeff_1_9_porty_1_381),
      .coeff_1_8_porty(select_section_coefficients_N_coeff_1_8_porty_1_377),
      .coeff_1_7_porty(select_section_coefficients_N_coeff_1_7_porty_1_373),
      .coeff_1_6_porty(select_section_coefficients_N_coeff_1_6_porty_1_369),
      .coeff_1_5_porty(select_section_coefficients_N_coeff_1_5_porty_1_365),
      .coeff_1_4_porty(select_section_coefficients_N_coeff_1_4_porty_1_361),
      .coeff_1_3_porty(select_section_coefficients_N_coeff_1_3_porty_1_357),
      .coeff_1_2_porty(select_section_coefficients_N_coeff_1_2_porty_1_353),
      .coeff_1_10_porty(select_section_coefficients_N_coeff_1_10_porty_1_349),
      .coeff_1_1_porty(select_section_coefficients_N_coeff_1_1_porty_1_345),
      .coeff_1_0_porty(select_section_coefficients_N_coeff_1_0_porty_1_341),
      .sec_num(N_11),
      .c_0(N_12) ,
      .c_1(N_13) ,
      .c_2(N_14) ,
      .c_3(N_20) ,
      .c_4(N_21) ,
      .c_5(N_22) ,
      .c_6(N_15) ,
      .c_7(N_16) ,
      .c_8(N_17) ,
      .c_9(N_18) ,
      .c_10(N_19) ,
      .mean(N_23) ,
      .stdev(N_24)    );
    coompute_polynomial_value  mycoompute_polynomial_value (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .srdyi(N_8),
      .x_in(N_7),
      .coeff_0(N_12),
      .coeff_1(N_13),
      .coeff_2(N_14),
      .coeff_3(N_20),
      .coeff_4(N_21),
      .coeff_5(N_22),
      .coeff_6(N_15),
      .coeff_7(N_16),
      .coeff_8(N_17),
      .coeff_9(N_18),
      .coeff_10(N_19),
      .mean(N_23),
      .stdev(N_24),
      .x_out(N_5) ,
      .srdyo(N_6)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  assign select_section_coefficients_N_stdev_4_porty_1_545 = select_section_coefficients_stdev_4_porty;
  assign select_section_coefficients_N_stdev_3_porty_1_541 = select_section_coefficients_stdev_3_porty;
  assign select_section_coefficients_N_stdev_2_porty_1_537 = select_section_coefficients_stdev_2_porty;
  assign select_section_coefficients_N_stdev_1_porty_1_533 = select_section_coefficients_stdev_1_porty;
  assign select_section_coefficients_N_mean_4_porty_1_529 = select_section_coefficients_mean_4_porty;
  assign select_section_coefficients_N_mean_3_porty_1_525 = select_section_coefficients_mean_3_porty;
  assign select_section_coefficients_N_mean_2_porty_1_521 = select_section_coefficients_mean_2_porty;
  assign select_section_coefficients_N_mean_1_porty_1_517 = select_section_coefficients_mean_1_porty;
  assign select_section_coefficients_N_coeff_4_9_porty_1_513 = select_section_coefficients_coeff_4_9_porty;
  assign select_section_coefficients_N_coeff_4_8_porty_1_509 = select_section_coefficients_coeff_4_8_porty;
  assign select_section_coefficients_N_coeff_4_7_porty_1_505 = select_section_coefficients_coeff_4_7_porty;
  assign select_section_coefficients_N_coeff_4_6_porty_1_501 = select_section_coefficients_coeff_4_6_porty;
  assign select_section_coefficients_N_coeff_4_5_porty_1_497 = select_section_coefficients_coeff_4_5_porty;
  assign select_section_coefficients_N_coeff_4_4_porty_1_493 = select_section_coefficients_coeff_4_4_porty;
  assign select_section_coefficients_N_coeff_4_3_porty_1_489 = select_section_coefficients_coeff_4_3_porty;
  assign select_section_coefficients_N_coeff_4_2_porty_1_485 = select_section_coefficients_coeff_4_2_porty;
  assign select_section_coefficients_N_coeff_4_10_porty_1_481 = select_section_coefficients_coeff_4_10_porty;
  assign select_section_coefficients_N_coeff_4_1_porty_1_477 = select_section_coefficients_coeff_4_1_porty;
  assign select_section_coefficients_N_coeff_4_0_porty_1_473 = select_section_coefficients_coeff_4_0_porty;
  assign select_section_coefficients_N_coeff_3_9_porty_1_469 = select_section_coefficients_coeff_3_9_porty;
  assign select_section_coefficients_N_coeff_3_8_porty_1_465 = select_section_coefficients_coeff_3_8_porty;
  assign select_section_coefficients_N_coeff_3_7_porty_1_461 = select_section_coefficients_coeff_3_7_porty;
  assign select_section_coefficients_N_coeff_3_6_porty_1_457 = select_section_coefficients_coeff_3_6_porty;
  assign select_section_coefficients_N_coeff_3_5_porty_1_453 = select_section_coefficients_coeff_3_5_porty;
  assign select_section_coefficients_N_coeff_3_4_porty_1_449 = select_section_coefficients_coeff_3_4_porty;
  assign select_section_coefficients_N_coeff_3_3_porty_1_445 = select_section_coefficients_coeff_3_3_porty;
  assign select_section_coefficients_N_coeff_3_2_porty_1_441 = select_section_coefficients_coeff_3_2_porty;
  assign select_section_coefficients_N_coeff_3_10_porty_1_437 = select_section_coefficients_coeff_3_10_porty;
  assign select_section_coefficients_N_coeff_3_1_porty_1_433 = select_section_coefficients_coeff_3_1_porty;
  assign select_section_coefficients_N_coeff_3_0_porty_1_429 = select_section_coefficients_coeff_3_0_porty;
  assign select_section_coefficients_N_coeff_2_9_porty_1_425 = select_section_coefficients_coeff_2_9_porty;
  assign select_section_coefficients_N_coeff_2_8_porty_1_421 = select_section_coefficients_coeff_2_8_porty;
  assign select_section_coefficients_N_coeff_2_7_porty_1_417 = select_section_coefficients_coeff_2_7_porty;
  assign select_section_coefficients_N_coeff_2_6_porty_1_413 = select_section_coefficients_coeff_2_6_porty;
  assign select_section_coefficients_N_coeff_2_5_porty_1_409 = select_section_coefficients_coeff_2_5_porty;
  assign select_section_coefficients_N_coeff_2_4_porty_1_405 = select_section_coefficients_coeff_2_4_porty;
  assign select_section_coefficients_N_coeff_2_3_porty_1_401 = select_section_coefficients_coeff_2_3_porty;
  assign select_section_coefficients_N_coeff_2_2_porty_1_397 = select_section_coefficients_coeff_2_2_porty;
  assign select_section_coefficients_N_coeff_2_10_porty_1_393 = select_section_coefficients_coeff_2_10_porty;
  assign select_section_coefficients_N_coeff_2_1_porty_1_389 = select_section_coefficients_coeff_2_1_porty;
  assign select_section_coefficients_N_coeff_2_0_porty_1_385 = select_section_coefficients_coeff_2_0_porty;
  assign select_section_coefficients_N_coeff_1_9_porty_1_381 = select_section_coefficients_coeff_1_9_porty;
  assign select_section_coefficients_N_coeff_1_8_porty_1_377 = select_section_coefficients_coeff_1_8_porty;
  assign select_section_coefficients_N_coeff_1_7_porty_1_373 = select_section_coefficients_coeff_1_7_porty;
  assign select_section_coefficients_N_coeff_1_6_porty_1_369 = select_section_coefficients_coeff_1_6_porty;
  assign select_section_coefficients_N_coeff_1_5_porty_1_365 = select_section_coefficients_coeff_1_5_porty;
  assign select_section_coefficients_N_coeff_1_4_porty_1_361 = select_section_coefficients_coeff_1_4_porty;
  assign select_section_coefficients_N_coeff_1_3_porty_1_357 = select_section_coefficients_coeff_1_3_porty;
  assign select_section_coefficients_N_coeff_1_2_porty_1_353 = select_section_coefficients_coeff_1_2_porty;
  assign select_section_coefficients_N_coeff_1_10_porty_1_349 = select_section_coefficients_coeff_1_10_porty;
  assign select_section_coefficients_N_coeff_1_1_porty_1_345 = select_section_coefficients_coeff_1_1_porty;
  assign select_section_coefficients_N_coeff_1_0_porty_1_341 = select_section_coefficients_coeff_1_0_porty;
assign x_lin = N_5;
  assign N_7 = x_adc;
assign srdyo = N_6;
  assign N_8 = srdyi;
  assign N_10 = section_limit;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

